Higher Order Functions
======================

Part 1
------

A function is called higher-order if it takes a function as an argument or
returns a function as a result:

twice :: (a -> a) -> a -> a
twice f x = f (f x)

Twice is a higher-order function because it takes a function as an argument.

The parentheses are mandatory here and indicate that the first parameter is a
function that takes one parameter and returns a value of the same type.

The second parameter is something of type a, and the return value's type is
also a. It doesn't matter what the parameters are, but they must all be of the
same type.

The body of the function applies x to the function, and then applies the
function to the result.

How does it do this?
It applies f once which takes an a and returns an a.
The argument to the second application of f is therefore another a.
Applying f to a for a second time returns a value of type a.

Examples:

twice (+3) 10
=
(+3) ((+3) 10)
=
(+3) 13
=
16

twice (++ " HAHA") "HEY"
=
(++ " HAHA") ((++ " HAHA") "HEY")
=
(++ " HAHA") "HEY HAHA"
=
"HEY HAHA HAHA"

twice (3:) [1]
=
(3:) ((3:) [1])
=
(3:) [3,1]
=
[3,3,1]

If our function requires us to pass in a function that takes only one
parameter, we can partially apply a function to the point where it only takes
a single parameter. E.g. the (+) function trakes two parameters, but in the
example above, it has been partially applied so that it only takes one
parameter.



Why are Higher Order Functions useful?
--------------------------------------
Don't Repeat Yourself! Common programming idioms can be encoded as functions
within the language itself.

Domain specific languages can be defined as collections of higher-order
functions.

Algebraic properties of higher order functions can be used to reason about
programs.

The Map Function
----------------

The higher-order library function called map applies a function to every
element of a list.

map :: (a -> b) -> [a] -> [b]

> map (+1) [1,3,5,7]
[2,4,6,8]

The map function can be defined in a particularly simple manner using a list
comprehension:

map f xs = [f x | x <- xs]

Map can also be defined using recursion. This is preferable for the purposes
of proofs:

map f [] = []
map (x:xs) = f x : map f xs

The Filter Function
-------------------

The higher-order library function filter selects every element from a list
that satisfies a predicate:

filter :: (a -> Bool) -> [a] -> [a]

> filter even [1..10]
[2,4,6,8,10]

The filter function can be defined using a list comprehension:

filter p xs = [x | x <- xs, p x]

The recursive definition of filter is very similar to that for map:

filter p [] = []
filter p (x:xs) | p x = x : filter p xs
                | otherwise filter p xs

This similar definition structure across different higher-order functions, 
allows for the extraction of that commonality into an even higher higher-order 
function.

That higher order function is foldr.

Part 2
------

foldr folds from the right
foldl folds from the left

The Foldr Function
------------------

Nb. (+) is used here to indicate the 'funny plus' operator (a '+' in a circle) rather
than the addition operator.

Foldr captures the essence of recursing over a list.

A number of functions on lists can be defined using the following simple
pattern of recursion:

f [] = v
f (x:xs) = x (+) f xs

f maps the empty list to some value v, and any non-empty list is mapped to
some function (+) applied to its head and f or its tail.

f traverses a list, replacing the empty list with v, and replacing every
occurrance of (:) with (+).

f is a homomorphism over a list - it respects the structure of the list.

(In abstract algebra, a homomorphism is a structure-preserving map between two
algebraic structures (such as groups, rings, or vector spaces).)

For example:

sum [] = 0              -- v   = 0
sum (x:xs) = x + sum xs -- (+) = +

product []                      -- v   = 1
product (x:xs) = x * product xs -- (+) = *

and [] = True            -- v   = True
and (x:xs) = x && and xs -- (+) = &&

The higher-order library function foldr encapsulates this simple pattern of
recursion, with the function (+) and the value v as arguments.

For example:

sum     = foldr (+) 0

product = foldr (*) 1

or      = foldr (||) False

and     = foldr (&&) True

Defining foldr
--------------

foldr itself can be defined using recursion:

The first parameter is a function that replaces (:) with f.
The second parameter is a value to replace the empty list with.
The third parameter is the list on which to work.
The result is a value of type b

foldr :: (a -> b -> b) -> b -> [a] -> b
foldr f v [] = v
foldr f v (x:xs) = f x (foldr f v xs}

However it is best to think of foldr non-recursively, as simultaneously
replacing eacy (:) in a list by a given function, and [] by a given value.

Foldr Examples
--------------

sum [1,2,3]
=
foldr (+) 0 [1,2,3]
=
foldr (+) 0 (1:(2:(2:[])))
=
(1 + (2 + (3 + 0)))
=
6

Foldr is very similar to the 'Visitor' pattern. It visits a list and for
every constructor, it applies the function that was passed into foldr as a
parameter.

product [1,2,3]
=
foldr (*) [1,2,3]
=
foldr (*) (1:(2:(3:[])))
=
(1 * (2 * (3 * 1)))
=
6

Other Foldr Examples
--------------------

Even though foldr encapsulates a simple pattern of recursion, it can be used
to define many more functions than might first be expected:

length :: [a] -> Int
length [] = 0
length (_:xs) = 1 + length xs

length replaces (:) with \_ n -> 1 + n
and [] with 0

length [1,2,3]
=
length (1:(2:(3:[])))
=
1 + (1 + (1 + 0)))
=
3

This is equivalent to:

length = foldr (\_ n -> 1 + n) 0

Now for the reverse function:

reverse [] = []
reverse (x:xs) = reverse xs ++ [x]

reverse [1,2,3]
=
reverse (1:(2:(3:[])))
=
(([] ++ [3]) ++ [2]) ++ [1]
=
[3,2,1]

In this case, the empty list is being replaced with the empty list, and the
(:) operator is being replaced with (\x xs -> xs ++ [x]). This makes:

reverse = foldr (\x xs -> xs ++ [x]) []

The (++) function has a particularly compact definition using foldr:

(++ ys) = foldr (:) ys

Each (:) is replaced with a (:).
The empty list is replaced with ys.

Why is foldr useful?
--------------------

Some recursive functions on lists, such as sum are simpler to define using
foldr.

Properties of functions defined using foldr can be proved using algebraic
properties of foldr, such as fusion and the banana split rule.

Advanced program optimisations can be simpler if foldr is used in place of
explicit recursion.

Part 3
------

The function composition operation
----------------------------------

The library function (.) returns the composition of two functions as a single
function.

(.) :: (b -> c) -> (a -> b) -> (a -> c)
f . g = \x -> f (g x)

The type signature makes sense when understood in terms of the function
application:

(.) takes a function f (b -> c) and a function g (a -> b) as parameters.
Function g (a -> b) is applied first with x, which makes x of type a.
Function f is applied to the result of g x, which is type b.
That makes the type definition of f (b -> c)
The function returned by the composition operator is therefore (a -> c)

For example:

odd :: Int -> Bool
odd = not . even

This is called pointfree style and it is much less verbose than writing it out
using lambda expressions:

odd = \x -> not (even x)

It is a good idea from a legibility point of view to use pointfree style
sparingly! Don't go bananas with it.

More useful higher order functions
----------------------------------

foldr is preferred over list comprehensions because foldr works for all
recursive data types, whereas list comprehensions only work for lists.

The library function all decides if every element of a list sataisfies a given
predicate:

all :: (a -> Bool) -> [a] -> Bool
all p xs = and [p x | xs]

a nicer definition of this would be:

all = map (p . and) -- not sure about this!


