Recursive Functions pt 1
========================

"tail call elimination" allows for recursive functions, whilst it avoids stack overflows, and is particularly useful for
control structures.

Functions in Haskell can be defined in terms of other functions

factorial :: Int -> Int
factorial n = product [1..n]

factorial maps any integer n to the product of the integers between 1 and n.

Following the evaluation of this expression:

factorial 4
=
product [1..4]
=
product [1,2,3,4]
=
1*2*3*4
=
24

Recursive functions
-------------------

Functions can also be defined in terms of themselves. These are recursive
functions.

factorial 0 = 1
factorial n = n * factorial (n - 1)

This is very similar to the way you would define recursion over lists.

Following the evaluation of factorial, we get a very stack heavy set of steps:

factorial 3
=
3 * factorial 2
=
3 * (2 * factorial 1)
=
3 * (2 * (1 * 1))
=
3 * (2 * 1)
=
3 * 2
=
6

If n is less than zero however, the recursive definition diverges, because the
base case is never reached.

> factorial -1
Exception: stack overflow

Why is recursion useful?
------------------------

Some functions, such as factorial, are simpler to define in terms of other
functions.

HOwever, many functions can naturally be defined in terms of themselves.

Properties of functions defined using recursion can be proved using the simple
but powerful mathematical technique of induction.

Recursion on lists
------------------

Recursion is not restricted to numbers, but can also be used to define
functions on lists.

product :: [Int] -> Int
product [] = 1
product (n:ns) = n * product ns

This is essentially the same as the recursive factorial function:

product [2,3,4]
=
2 * product [3,4]
=
2 * (3 * product [4])
=
2 * (3 * (4 * product []))
=
2 * (3 * (4 * 1)
=
2 * (3 * 4)
=
2 * 12
=
24

Using the same pattern of recursion as in product we can define the length
function on lists:

length :: [a] -> Int
length [] = 0
length (_:xs) = 1 + length xs

Evaluating length:

length [1,2,3]
= 
1 + length [2,3]
=
1 + (1 + (length [3]))
=
1 + (1 + (1 + length []))
=
1 + (1 + (1 + 0))
=
1 + (1 + 1)
=
1 + 2
=
3

Using a similar pattern of recursion we can define the reverse function on
lists.

reverse maps the empty list to the empty list, and any non-empty list to the
reverse of its tail appended to its head.

reverse :: [a] -> [a]
reverse [] = []
reverse (x:xs) = reverse xs ++ [x]

Evaluating reverse:

reverse [1,2,3]
=
reverse [2,3] ++ [1]
=
(reverse [3] ++ [2]) ++ [1]
=
((reverse [] ++ [3]) ++ [2]) ++ [1]
=
(([] ++ [3]) ++ [2]) ++ [1]
=
[3,2,1]

Multiple arguments
==================

Functions with more than one argument can also be defined using recursion:

zip :: [a] -> [b] -> [(a,b)]
zip [] _ = []
zip _ [] = []
zip (x:xs) (y:ys) = (x,y) : zip xs ys

drop :: Int -> [a] -> [a]
drop 0 xs = xs
drop _ [] = []
drop n (_:xs) = drop (n - 1) xs

(++) :: [a] -> [a] -> [a]
(++) [] [] = []
(++) [] ys = ys
(++) (x:xs) ys = x : (xs ++ ys)

Quicksort
---------

Sort a list recursively.

* The empty list is already sorted
* Non-empty lists can be sorted by:
  1. sorting the tail values <= the head
  2. sorting the tail values > the head
  3. appending the resulting lists on either side of the head value.

qsort :: [Int] -> [Int]
qsort [] = []
qsort [x:xs] = 
  qsort smaller ++ [x] ++ qsort larger
  where
    smaller = [a | a <- xs, a <= x]
    larger = [b |b <- xs, b > x]
      
This is probably the simplest implementation of any quicksort in any
programming language!

Evaluating qsort (abbreviated to q):

q [3,2,4,1,5]
=
(q [2,1]) ++ [3] ++ (q [4,5])
=
(q [1] ++ [2] ++ q []) ++ [3] ++ (q [] ++ [4] ++ q [5])
=
((q [] ++ [1] ++ q []) ++ [2] ++ []) ++ [3] ++ ([] ++ [4] ++ (q [] ++ [5] ++ q []))
=
(([] ++ [1] ++ []) ++ [2]) ++ [3] ++ ([] ++ [4] ++ ([] ++ [5] ++ []))
=
(([1]) ++ [2]) ++ [3] ++ ([4] ++ ([5]))
=
([1,2]) ++ [3] ++ ([4,5])
=
[1,2,3,4,5]

Replicate
---------

Produce a list with n identical elements:

replicate :: Int -> a -> [a]
replicate 0 _ = []
replicate n a = a : replicate (n - 1)

Select the nth element
----------------------

(!!) :: [a] -> Int -> a
(!!) (x:xs) 0 = x 
(!!) (x:xs) n = (!!) xs (n - 1)

Value is an element in a list
-----------------------------

elem :: Eq a => a -> [a] -> Bool
elem _ [] = False
elem a (x:xs) | a == x = True
              | otherwise = elem a xs
